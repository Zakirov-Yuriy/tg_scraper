from telethon import TelegramClient, events
from config import api_id, api_hash, group_usernames
from database import save_message
from collections import defaultdict
import os
from datetime import datetime

client = TelegramClient("tg_listener_session", api_id, api_hash)


def normalize_group_name(name: str) -> str:
    if not name:
        return "unknown"
    return name.lstrip('@').strip()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ —Ç.–¥.) –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—É—Ç–∏
async def save_media(msg):
    media_dir = "static/media"
    os.makedirs(media_dir, exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ç–∏–ø—É –º–µ–¥–∏–∞
    if msg.photo:
        ext = "jpg"
    elif msg.video:
        ext = "mp4"
    elif msg.voice:
        ext = "ogg"
    elif msg.audio:
        ext = "mp3"
    else:
        ext = "bin"  # –¥–ª—è –ø—Ä–æ—á–∏—Ö —Ç–∏–ø–æ–≤

    filename = f"{timestamp}_{msg.id}.{ext}"
    full_path = os.path.join(media_dir, filename)

    await msg.download_media(file=full_path)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
    return os.path.join("media", filename)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ–¥–∏–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ª—å–±–æ–º)
async def save_all_media(msgs):
    media_paths = []
    for msg in msgs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–∏–∞
        if msg.photo or msg.video or msg.voice or msg.audio:
            path = await save_media(msg)
            media_paths.append(path)
    return ",".join(media_paths) if media_paths else None


# –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø
async def parse_history():
    for username in group_usernames:
        group_name = normalize_group_name(username)
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ {group_name}")
        grouped_messages = defaultdict(list)

        async for message in client.iter_messages(username, reverse=True):
            text = message.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            date = message.date
            sender_id = message.sender_id

            if message.grouped_id:
                grouped_messages[message.grouped_id].append(message)
            else:
                if message.photo or message.video or message.voice or message.audio:
                    media_path = await save_all_media([message])
                    save_message(group_name, sender_id, text, date, media_path)
                else:
                    save_message(group_name, sender_id, text, date)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º—ã (–≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å media)
        for group_id, messages in grouped_messages.items():
            media_path = await save_all_media(messages)
            text = messages[0].text or "[–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞]"
            date = messages[0].date
            sender_id = messages[0].sender_id
            save_message(group_name, sender_id, text, date, media_path)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
@client.on(events.NewMessage(chats=group_usernames))
async def handler(event):
    msg = event.message
    text = msg.text or "[–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
    date = msg.date
    group_name = normalize_group_name(event.chat.username if event.chat else "unknown")
    sender_id = msg.sender_id

    if hasattr(msg, 'grouped_id') and msg.grouped_id:
        album_msgs = await client.get_messages(event.chat_id, limit=20)
        album_media = [m for m in album_msgs if m.grouped_id == msg.grouped_id and (m.photo or m.video or m.voice or m.audio)]
        media_path = await save_all_media(album_media)
        save_message(group_name, sender_id, text, date, media_path)
    elif msg.photo or msg.video or msg.voice or msg.audio:
        media_path = await save_all_media([msg])
        save_message(group_name, sender_id, text, date, media_path)
    else:
        save_message(group_name, sender_id, text, date)

    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: [{date}] {group_name}: {text}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    print("üì• –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é...")
    await parse_history()
    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ñ–¥—ë–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()


with client:
    client.loop.run_until_complete(main())
